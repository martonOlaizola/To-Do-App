from pydantic import BaseModel, EmailStr, field_validator

class UserBase(BaseModel):
  """Common fields shared across user payloads.

  Attributes:
    email (EmailStr): Email address used for authentication.
  """

  email: EmailStr


class UserCreate(UserBase):
  """Payload used when registering a new account.

  Attributes:
    password (str): Plain text password that will be hashed server side.
  """

  password: str

  @field_validator("password")
  def validate_password(value: str) -> str:
    if len(value) < 6:
      raise ValueError("Password too short, 6 characters minimum")
    return value

class UserOut(UserBase):
  """Representation of a user returned by the API.

  Attributes:
    id (int): Identifier managed by the database.
  """

  id: int

  class Config:
    """Enable conversion from ORM objects."""

    from_attributes = True


class Token(BaseModel):
  """Access token returned after a successful login.

  Attributes:
    access_token (str): Encoded JWT generated by the backend.
    token_type (str): Token type, typically bearer.
  """

  access_token: str
  token_type: str
